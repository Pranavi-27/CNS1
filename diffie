class GFG { 
    private static long power(long a, long b, long p) { 
        if (b == 1) 
            return a; 
        else 
            return (((long)Math.pow(a, b)) % p);} 
    public static void main(String[] args){ 
        long P, G, x, a, y, b, ka, kb; 
        P = 23; 
        System.out.println("The value of P:" + P); 
        G = 9; 
        System.out.println("The value of G:" + G); 
        a = 4; 
        System.out.println("The private key a for Alice:" + a); 
        x = power(G, a, P); 
        b = 3; 
        System.out.println("The private key b for Bob:"+ b); 
        y = power(G, b, P); 
        ka = power(y, a, P); // Secret key for Alice 
        kb = power(x, b, P); // Secret key for Bob 
        System.out.println("Secret key for the Alice is:"+ ka); 
        System.out.println("Secret key for the Bob is:"+ kb); 
    }}

2. import java.util.Scanner; 
 
public class DiffieHellmanExample 
{ 
    public static void main(String[] args) 
 { 
        Scanner sc = new Scanner(System.in); 
        System.out.print("Enter a prime number (p): "); 
        int p = sc.nextInt(); 
        System.out.print("Enter a primitive root of p (g): "); 
        int g = sc.nextInt(); 
        System.out.print("Enter Alice's private key (a): "); 
        int a = sc.nextInt(); 
        System.out.print("Enter Bob's private key (b): "); 
        int b = sc.nextInt(); 
        int A = (int) (Math.pow(g, a) % p);  
        int B = (int) (Math.pow(g, b) % p);  
        System.out.println("\nPublicly shared keys:"); 
        System.out.println("Alice's public key (A): " + A); 
        System.out.println("Bob's public key (B): " + B); 
        int keyA = (int) (Math.pow(B, a) % p);  
        int keyB = (int) (Math.pow(A, b) % p);  
        System.out.println("\nShared Secret Key computed by Alice: " + keyA); 
        System.out.println("Shared Secret Key computed by Bob: " + keyB); 
        if (keyA == keyB) 
{ 
            System.out.println("\nKeys match! Secure communication established."); 
        } else { 
            System.out.println("\nKeys do not match. Something went wrong!"); 
        } 
    } 
} 
Output: 
Enter a prime number (p): 23 
Enter a primitive root of p (g): 5 
Enter Alice's private key (a): 6 
Enter Bob's private key (b): 15 
Publicly shared keys: 
Alice's public key (A): 8 
Bob's public key (B): 19 
Shared Secret Key computed by Alice: 2 
Shared Secret Key computed by Bob: 2 
Keys match! Secure communication established.
